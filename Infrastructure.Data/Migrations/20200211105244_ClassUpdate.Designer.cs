// <auto-generated />
using System;
using Infrastructure.Data.UnitOfWorks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(UnitOfWork))]
    [Migration("20200211105244_ClassUpdate")]
    partial class ClassUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Modules.BlogEntitys.BlogArticle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EditTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PraiseCount")
                        .HasColumnType("int");

                    b.Property<int>("ReadCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("ClassId");

                    b.ToTable("BlogArticles");
                });

            modelBuilder.Entity("Domain.Modules.BlogEntitys.BlogClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ClassName")
                        .HasColumnType("varchar(32)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("OrderID")
                        .HasColumnType("varchar(12)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("BlogClasses");
                });

            modelBuilder.Entity("Domain.Modules.BlogEntitys.BlogInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BlogName")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("BlogInfos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000001-0001-0000-0000-000000000000"),
                            BlogName = "MyBlog",
                            CreateTime = new DateTime(2020, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("00000001-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Domain.Modules.BlogEntitys.BlogUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("PassWord")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.ToTable("BlogUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000001-0000-0000-0000-000000000000"),
                            PassWord = "df6234833d7d4d76a96654a1c89ac08f",
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Domain.Modules.BlogEntitys.BlogArticle", b =>
                {
                    b.HasOne("Domain.Modules.BlogEntitys.BlogInfo", "BlogInfo")
                        .WithMany("Articles")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Modules.BlogEntitys.BlogClass", "BlogClass")
                        .WithMany("Articles")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Modules.BlogEntitys.BlogClass", b =>
                {
                    b.HasOne("Domain.Modules.BlogEntitys.BlogInfo", "BlogInfo")
                        .WithMany("Classes")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Modules.BlogEntitys.BlogInfo", b =>
                {
                    b.HasOne("Domain.Modules.BlogEntitys.BlogUser", "User")
                        .WithOne("BlogInfo")
                        .HasForeignKey("Domain.Modules.BlogEntitys.BlogInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
